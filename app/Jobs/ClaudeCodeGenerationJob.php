<?php

namespace App\Jobs;

use App\Models\Task\TaskDefinition;
use App\Models\Task\TaskRun;
use App\Services\Task\TaskRunnerService;
use Exception;
use Illuminate\Support\Facades\Process;
use Newms87\Danx\Jobs\Job;

class ClaudeCodeGenerationJob extends Job
{
    public TaskRun $taskRun;

    public int $timeout = 1200; // 20 minutes for code generation

    public function __construct(TaskRun $taskRun)
    {
        $this->taskRun = $taskRun;
        parent::__construct();
    }

    public function ref(): string
    {
        return 'claude-code-generation:' . $this->taskRun->id;
    }

    public function run(): void
    {
        $taskDefinition  = $this->taskRun->taskDefinition;
        $taskDescription = $taskDefinition->task_runner_config['task_description'] ?? '';

        if (!$taskDescription) {
            throw new Exception('Task description is required for Claude code generation');
        }

        try {
            // Generate the code using Claude
            $generatedCode = $this->generateCodeWithClaude($taskDescription, $taskDefinition);

            // Update the task definition with the generated code
            $config                      = $taskDefinition->task_runner_config;
            $config['generated_code']    = $generatedCode;
            $config['code_generated_at'] = now()->toISOString();

            $taskDefinition->update(['task_runner_config' => $config]);

            // Create a new task run to execute the generated code
            $executionTaskRun = TaskRunnerService::prepareTaskRun($taskDefinition);

            // Copy input artifacts from the original task run
            $inputArtifacts = $this->taskRun->inputArtifacts()->get();
            if ($inputArtifacts->isNotEmpty()) {
                $executionTaskRun->addInputArtifacts($inputArtifacts);
            }

            // Dispatch the execution task
            TaskRunnerService::continue($executionTaskRun);

        } catch (Exception $e) {
            $this->taskRun->update([
                'failed_at' => now(),
                'step'      => 'Code generation failed: ' . $e->getMessage(),
            ]);
            throw $e;
        }
    }

    /**
     * Generate PHP code using Claude
     */
    protected function generateCodeWithClaude(string $taskDescription, TaskDefinition $taskDefinition): string
    {
        // Build the prompt for Claude
        $prompt = $this->buildClaudePrompt($taskDescription, $taskDefinition);

        // Use Claude CLI to generate code
        $result = Process::timeout($this->timeout - 60) // Leave 1 minute buffer
            ->run(['claude', 'code', '--prompt', $prompt]);

        if (!$result->successful()) {
            throw new Exception('Claude code generation failed: ' . $result->errorOutput());
        }

        $output = $result->output();

        // Extract PHP code from Claude's response
        $code = $this->extractPhpCodeFromResponse($output);

        if (empty($code)) {
            throw new Exception('No valid PHP code generated by Claude');
        }

        return $code;
    }

    /**
     * Build the prompt for Claude code generation
     */
    protected function buildClaudePrompt(string $taskDescription, TaskDefinition $taskDefinition): string
    {
        $inputArtifacts = $this->taskRun->inputArtifacts()->get();
        $artifactInfo   = $inputArtifacts->map(function ($artifact) {
            return [
                'name'       => $artifact->name,
                'has_text'   => !empty($artifact->text_content),
                'has_json'   => !empty($artifact->json_content),
                'file_count' => $artifact->storedFiles->count(),
            ];
        })->toArray();

        return "You are a PHP code generator. Generate PHP code to accomplish the following task:

TASK DESCRIPTION:
{$taskDescription}

CONTEXT:
- You are working within a Laravel application task runner system
- Input artifacts are available in the \$inputArtifacts array
- Each artifact has: id, name, text_content, json_content, and files array
- Use the createArtifact() helper function to create output artifacts
- createArtifact(\$name, \$content, \$type) where type is 'text' or 'json'

AVAILABLE INPUT ARTIFACTS:
" . json_encode($artifactInfo, JSON_PRETTY_PRINT) . '

REQUIREMENTS:
1. Generate only PHP code (no markdown formatting)
2. Start with <?php tag
3. Process the $inputArtifacts array as needed
4. Use createArtifact() to generate outputs
5. Handle errors gracefully with try/catch
6. Keep code focused and efficient
7. Add comments to explain complex logic

The code should accomplish the task described above and create appropriate output artifacts.';
    }

    /**
     * Extract PHP code from Claude's response
     */
    protected function extractPhpCodeFromResponse(string $response): string
    {
        // Look for PHP code blocks
        if (preg_match('/```php\s*(.*?)\s*```/s', $response, $matches)) {
            return trim($matches[1]);
        }

        // Look for code starting with <?php
        if (preg_match('/<\?php.*$/s', $response, $matches)) {
            return trim($matches[0]);
        }

        // If response starts with <?php, use it as-is
        if (str_starts_with(trim($response), '<?php')) {
            return trim($response);
        }

        // Last resort: wrap the response in <?php tags
        return "<?php\n\n" . trim($response);
    }
}
